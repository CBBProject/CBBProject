// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include <cbbViewImage.h>
#include <cbbViewImagePlugin.h>

#include <dtkCore/dtkPlugin_p.h>

#include <dtkLog/dtkLog.h>

// /////////////////////////////////////////////////////////////////
// cbbViewImagePluginPrivate interface
// /////////////////////////////////////////////////////////////////

class cbbViewImagePluginPrivate: public dtkPluginPrivate {
public:
    cbbViewImagePluginPrivate(cbbViewImagePlugin *q = 0): dtkPluginPrivate(q) {}
    cbbViewImagePluginPrivate(const cbbViewImagePluginPrivate& other) : dtkPluginPrivate(other) {} // Complete copy ctror with your local members.

public:
    ~cbbViewImagePluginPrivate(void) {}
    
public:
    // Class variables go here.
};

////////////////////////////////////////////////////
// cbbViewImagePlugin protected constructors
////////////////////////////////////////////////////

DTK_IMPLEMENT_PRIVATE(cbbViewImagePlugin, dtkPlugin);

// /////////////////////////////////////////////////////////////////
// cbbViewImagePlugin implementation
// /////////////////////////////////////////////////////////////////

cbbViewImagePlugin::cbbViewImagePlugin(QObject *parent): dtkPlugin(*new cbbViewImagePluginPrivate,parent) { }

cbbViewImagePlugin::cbbViewImagePlugin(const cbbViewImagePlugin& other) : dtkPlugin(*new cbbViewImagePluginPrivate(*other.d_func()), other)
{
    
}

cbbViewImagePlugin::~cbbViewImagePlugin(void)
{

}

bool cbbViewImagePlugin::initialize(void)
{
    if(!cbbViewImage::registered())
	dtkWarn() << "Unable to register cbbViewImage type";

    return true;
}

bool cbbViewImagePlugin::uninitialize(void)
{
    return true;
}

QString cbbViewImagePlugin::name(void) const
{
    return "cbbViewImagePlugin";
}

QString cbbViewImagePlugin::description(void) const
{
    return "";
}

QStringList cbbViewImagePlugin::tags(void) const
{
    return QStringList();
}

QStringList cbbViewImagePlugin::types(void) const
{
    return QStringList() << "cbbViewImage";
}

Q_EXPORT_PLUGIN2(cbbViewImagePlugin, cbbViewImagePlugin)
