// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include <cbbViewImage.h>

#include <QtGui>
#include <dtkCore/dtkAbstractData.h>
#include <Image.H>
#include <Images/RGBPixel.H>
#include <Images/Maps.H>
#include <dtkCore/dtkAbstractViewFactory.h>
#include <dtkCore/dtkAbstractView_p.h>

// /////////////////////////////////////////////////////////////////
// cbbViewImagePrivate interface
// /////////////////////////////////////////////////////////////////

class cbbViewImagePrivate : public dtkAbstractViewPrivate
{
public:
    cbbViewImagePrivate(cbbViewImage *q = 0) : dtkAbstractViewPrivate(q) {}
    cbbViewImagePrivate(const cbbViewImagePrivate& other) : dtkAbstractViewPrivate(other) {} // Complete copy ctror with your local members.

public:
    ~cbbViewImagePrivate() {}

public:

    QGraphicsScene* scene;
    QGraphicsView*  view;
};

////////////////////////////////////////////////////
// cbbViewImage protected constructors
////////////////////////////////////////////////////

DTK_IMPLEMENT_PRIVATE(cbbViewImage, dtkAbstractView);

// /////////////////////////////////////////////////////////////////
// cbbViewImage implementation
// /////////////////////////////////////////////////////////////////

cbbViewImage::cbbViewImage() : dtkAbstractView(*new cbbViewImagePrivate(this), 0)
{
    DTK_D(cbbViewImage);
    
    d->scene = new QGraphicsScene;
    
    d->view = new QGraphicsView;
    d->view->setScene(d->scene);
    d->view->setRenderHint(QPainter::Antialiasing, true);
}

cbbViewImage::cbbViewImage(const cbbViewImage& other) : dtkAbstractView(*new cbbViewImagePrivate(*other.d_func()), other)
{

}

cbbViewImage::~cbbViewImage()
{

}

cbbViewImage& cbbViewImage::operator = (const cbbViewImage& other)
{
    dtkAbstractView::operator=(other);

    // Complete here with respect to your local d-pointer as follows:
    //
    // DTK_D(cbbViewImage);
    //
    // d->index = other.d_func()->index;

    return *this;
}

bool cbbViewImage::registered()
{
    return dtkAbstractViewFactory::instance()->registerViewType(id,create,"dtkAbstractView");
}

QString cbbViewImage::description() const {
    return "Viewer for image data";
}

void cbbViewImage::setData(dtkAbstractData* data) {
    DTK_D(cbbViewImage);

    if (!data) 
        return;

    Images::Image* image = static_cast<Images::Image*>(data->data());

    if (!image || image->dimension()!=2)
        return;

    using namespace Images;
    using namespace Images::Pixels;

    typedef RGB<unsigned char> RGBPixel;
    typedef Polymorphic::MultiDim<2> Images2D;
    typedef Images2D::MultiType<float,Images2D::MultiType<double,Images2D::MultiType<unsigned char,Images2D::MultiType<unsigned> > > > Scalar2D;
    typedef Images2D::MultiType<RGBPixel,Scalar2D> Accepted;

    typedef RGB<double>        RGBDouble;
    Accepted::Converter<RGBDouble> convert;
    const Image2D<RGBDouble>& im = convert(image);

    const IntensityMap<RGBDouble> map(im);
    QImage qim(im.dimx(),im.dimy(),QImage::Format_RGB888);
    const Image2D<RGBDouble>::Shape& shape = im.shape();
    for (typename Image2D<RGBDouble>::Shape::const_iterator i=shape.begin();i!=shape.end();++i) {
        RGBPixel pix = map(im(i));
        qim.setPixel(i(1),i(2),(pix.red() << 8 | pix.green()) << 8 | pix.blue());
    }

    QGraphicsPixmapItem* item = new QGraphicsPixmapItem(QPixmap::fromImage(qim));
    d->scene->addItem(item);
    d->view->show();
}

QWidget* cbbViewImage::widget() {
    DTK_D(cbbViewImage);
    return d->view;
}

const char cbbViewImage::id[] = "cbbViewImage";
